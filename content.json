{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"linux系统的基本认识","slug":"linux系统的基本认识","date":"2018-08-13T12:54:21.000Z","updated":"2018-11-13T13:20:50.222Z","comments":true,"path":"2018/08/13/linux系统的基本认识/","link":"","permalink":"http://yoursite.com/2018/08/13/linux系统的基本认识/","excerpt":"","text":"基本命令 touch 生成文件 enco “hello world” 输出语句 快捷键 tab 补全命令名，路径名，参数名 ctrl +c 退出程序，不会退出终端 ctrl +d 退出终端，结束键盘输入 ctrl +s 暂停程序，按任意键继续 ctrl +a 将光标移至命令行开头 ctrl +e 将光标移至命令行尾部 ctrl +k 删除光标到最后的命令 alt +backspace 向前删除前面一个单词，但是如果光标在单词中，会先把单词前面部分删除。 shift +pgon/pgup 将终端显示内容向上滚动或者向下 通配符 *（星号） 匹配0或者多个字符 ？（问号） 匹配任意的一个字符 {x1..x2} 匹配x1-x2之间，例如用在创建是数字文件的情景之中 [list] 匹配list中一个字符 [!list] 匹配list之外的字符 [c1-c2] 匹配c1-c2任意单一字符 {string1，string2,string3} 匹配其中所有命令行获取帮助 man man man 查看自己 man number ls 查看数字区段所代表的命令 命令行分为一下八个区域区段 | 说明—|—1 | 一般命令2 | 系统调用3 | 库函数，包含了标准c库函数4 | 特殊文件，驱动程序5 | 文件格式与约定6 | 游戏屏保7 | 杂项8 | 系统管理命令与守护进程 作业=》输出 sudo apt-get updatesudo apt-get install bannerbanner -“你想要输出的东西”printerbanner -w 10 “你要输出的内容”//花样输出","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"liun系统的基本命令","slug":"liun系统的基本命令","date":"2018-08-13T12:54:21.000Z","updated":"2018-11-14T02:40:23.689Z","comments":true,"path":"2018/08/13/liun系统的基本命令/","link":"","permalink":"http://yoursite.com/2018/08/13/liun系统的基本命令/","excerpt":"","text":"软件操作命令 软件包管理 yum 安装软件 yum install *** 卸载软件 yum remove *** 搜索软件 yum search *** 清理缓存 yum clean packages 列出已经安装的软件 yum list 软件包信息 yum info *** 服务器硬件资源和磁盘操作命令 内存 free-m 硬盘 df-h 负载(cpu超过了大于1) w/top cpu/核数 cat /porc/cupinfo5.格式化磁盘fdisk 文件和文件夹操作命令 linux文件目录结构 释义 符号 根目录 / 家目录 /home 配置目录 etc 用户程序目录 usr 临时目录 tmp 也如下树形图： 文件基本操作命令 进入目录 cd cd /home 如果没有home代表你还有新建用户 展现文件夹中所有 ls al ls al 查看目录下的文件 ls 新建文件 touch XXXX 新建文件夹 mkdir XXXX 新建多级目录 mkdir -p dir1/dir2/dir3 删除文件和目录 rm XXXXX 删除目录 rm -r XXXXX 强制删除文件目录 rm -rf XXXXX 复制 cp 一个路径 另一个路径 移动 mv 一个路径 另一个路径 显示当前路径 pwd 文本编辑vim 插入 - 文件权限 421 文件搜索，查找， 文件压缩解压 系统用户操作命令防火墙相关命令提权操作sudo和文件传输操作","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"初识redis-redis的其他功能","slug":"初识redis-redis的其他功能","date":"2018-08-13T12:54:21.000Z","updated":"2018-11-13T13:08:28.805Z","comments":true,"path":"2018/08/13/初识redis-redis的其他功能/","link":"","permalink":"http://yoursite.com/2018/08/13/初识redis-redis的其他功能/","excerpt":"","text":"慢查询 生命周期 1.发送命令 两个配置 slowlog-max-len先进先出队列长度 default:128 配置：config set 意义：慢查询队列最大长度 slowlog-log-slower-than 慢查询阈值 default :10000 配置：config set 意义：记录执行时间超过阈值的查询 三个命令 slowlog get[n]获取慢查询队列 slowlog len 获取慢查询长度 slowlog reset 清空慢查询 运维经验 slow-max-len slowlog-log-slower-than pipeline 流水线=1次网络+n次命令 pipeline打包多次网络请求 非原子操作 pipeline只能作用一个redis的节点 HyperLogLogbitmap 位图能操作value的bit二进制数据 setbit key index value 设置该值二进制第index的值 getbit key offset 获取该值二进制第index的值 bitcount key [start,end] 获取该值二进制start-end的值是1的个数 bitop bitpos 例子场景 set 32位 50000000 200mbbitmap 1位 100000000 12.5mb大的数据使用bitmap,小的用set 发布订阅 角色1.发布者(publisher)2.订阅者subscriber3.频道(channel)pub发布给频道，sub订阅了频道，接收推送 命令 publish channel message 返回订阅者数量 subscribe [channel] 订阅频道 unsubscribe [channel] 取消频道 psubscribe[v*] 匹配符合模式的1订阅 punsubscribe[v*] 匹配符合模式的退订 pubsu channels 列出至少有一个订阅者的频道 pubsub numsub [channel..] 列出频道制定数目的订阅者 消息队列 抢，pub发布，只有一个sub能抢到 GEO(地理信息定位) 存储经纬度信息 范围计算 计算两地距离","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"初识redis-基本类型以及使用场景","slug":"初识redis-基本类型以及使用场景","date":"2018-08-13T12:54:21.000Z","updated":"2018-11-13T13:00:26.366Z","comments":true,"path":"2018/08/13/初识redis-基本类型以及使用场景/","link":"","permalink":"http://yoursite.com/2018/08/13/初识redis-基本类型以及使用场景/","excerpt":"","text":"通用命令 通用命令 keys:计算key的数量 keys: *遍历所有key，时间复杂度O(n) keys[psttern]: 条件查询key ,时间复杂度O(1) dbsize: 计算数据库大小,时间复杂度O(1) exists key: 判断key是否存在，存在返回1，否则0,时间复杂度O(1) del key[key…]: 删除数据,时间复杂度O(1) expire key seconds: 给key设置过期时间,时间复杂度O(1) ttl key :查看某key剩余的过期时间，如果key存在且没有过期时间返回-1，如果没有过期时间返回-2,时间复杂度O(1) persist key :去除某个key的过期时间,时间复杂度O(1) type key:计算其类型,时间复杂度O(1) 单线程架构 一时间只能只运行一条命令，拒绝长命令类似keys,运行快主要是用了内存。 数据结构和内部编码123456789101112131415161718192021graph TD A[Chrisymas] --&gt;B(string) A--&gt;C(hash) A--&gt;D(list) A--&gt;E(set) A--&gt;F(zset) B--&gt;raw B--&gt;int B--&gt;embstr C--&gt;dd C--&gt;dd C--&gt;dd D--&gt;dd D--&gt;dd D--&gt;dd E--&gt;dd E--&gt;dd E--&gt;dd F--&gt;dd F--&gt;dd F--&gt;dd 列表类型字符串类型 结构和命令 字符串最高限制512MB,缓存，计数器，分布式锁 get key set key value del key incr key 自增 decr key 自减 incrby key num 自增num decrby key num 自减num 差缺补漏 set setnx //不存在才执行 set setnx //存在才执行 mget key1 key2… 批量获取 mset key1 value1 key2 value2…批量设置 getset key newvalue 设置新值返回旧值 append key value 追加 strlen key 长度 incrbyfload 增加浮点长度 getrange 根据下标获取内容 使用实例 12//网站访问量技术，且是顺序执行 incr userID:pageview 1234567891011//缓存视频的基本信息 function getInfoByidFromRedis(id)&#123; var rediskey = redisPrefix +id; var videoInfo =redis.get(rediskey); if(videoInfo == null)&#123; videoInfo=mysql.get(id) ; if(videoInfo)&#123; redis.set(rediskey,serialize()); &#125; &#125; &#125; 12//分布式id生成器多个service需要id 用incr 集合类型 特点 无序，无重复，集合间操作 集合内API sadd key element 添加 srem key element 删除 scard key 计算集合元素数量 sismember 判断是不是该集合的元素 srandmember 随机选择一个元素 smembers 查询所有的元素 spop 随机弹出一个 集合间API sdiff 差集 sinter 交集 sunion 并集 哈希类型 哈希键值结构 key fileds value user:1:info name hjw user:1:info age 23 哈希命令 hset key field value //设置一个hashset 的一个field的值 hget key field 得到一个hashset 的一个field的值 hdel key field 删除一个hashset 的一个field的值 hgetall key 获得该key的所有field的值 hexists key field 判断field是否存在 hlen 返回属性 hmget key field1 value1 field2 value2 hmset key field1 field2 hgetall key 获得所有的filed和value,注意单线程,如果filed非常多,会消耗性能 hvals key 获得所有的value hkeys key 获得所有fileds的名字 使用场景 12//页面访问数量hincrby user:1:info string 和hash的存储对象对比 key value(整个对象.toString()) key(fileds) value //比如user-name:”名字” user-age:”22” key value //value是一个对象,且不是string 三种方案对比命令 | 优点|缺点—|—|—string v1| 编程简单，可能节约内存|序列化开销，修改属性需要操作整个数据string v2 | 直观，可以部分修改|内存占用较大，key较为分散hash | 直观，节省空间，可以部分更新|编程稍微复杂，ttl不好控制 列表(有序，可以重复,左右弹出) 命令 rpush/lpush(右边插入/左边插入) key1 value1 ,key2 value2…. rpop/lpop(右边弹出/左边弹出) key1 value1 ,key2 value2…. linsert key before|after value newValue 在value 左/右边插入newvalue lrem key count value 删除左边|count|个value(count&gt;0),删除右边|count|个value(count&lt;0) ltrim key start end 删除下标start-end的之外的值 lrange key start end 搜索下标start-end lindex key index 按照下标来取值 len获取list长度 使用场景 123//微博的时间轴 用户新增数据，lpush 使用lrange key start end 查漏补缺 blpop brpop key timeout 阻塞弹出，消息队列 tips1 lpush +lpop= stack 栈 左近左出（先进后出）2 lpush +rpop= queue 队列 左近右出 (先进先出)3 lpush + ltrim = capped Collection4 lpush + brpop =Message queue 消息队列 有序集合 特点 有序，无重复，组成是（element + score） 命令 zadd key score1 element1 score2 element2 新增 zrem key score1 element1 score2 element2 删除 zscore key element 获得元素的score zincrby key num element 给element的score增加num zcard 返回元素的个数 zrank key element 获取element排名 应用场景 12排行榜使用排序的特点，比如学生排行，用成绩做score,做排序的方式","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"初识redis","slug":"初识redis","date":"2018-08-13T12:54:21.000Z","updated":"2018-11-13T12:55:45.683Z","comments":true,"path":"2018/08/13/初识redis/","link":"","permalink":"http://yoursite.com/2018/08/13/初识redis/","excerpt":"","text":"redisredis特点 速度快，存内存 redis可存储的数据结构 string HashTables LinkedLists sets sorted set bitMaps位图 HyperLogLog GEO 地理信息定位 redis应用场景 缓存系统 计数器：微博点赞 消息队列 排行榜 社交网络 实现高可用分布式基础 主从复制 redis安装配置 下载，官网下载直装版，不断next,打开一个cmd终端，cd进入redis的安装目录，输入redis-server.exe运行成功之后，再次打开一个cmd终端，输入redis-cli.exe运行redis客户端 daemonize 是否使用守护进程 no ro yes ;使用之后启动日志可打印在配置的日志文件 port 端口号，单机多实例要配置(default:6379),6379对应Merz歌手的名字，九宫格手机输入，这个不知真假 logfile 日志文件 dir 工作目录","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"window下搭建hexo的github博客","slug":"window下搭建hexo的github博客","date":"2018-06-12T12:54:21.000Z","updated":"2018-11-14T03:09:52.487Z","comments":true,"path":"2018/06/12/window下搭建hexo的github博客/","link":"","permalink":"http://yoursite.com/2018/06/12/window下搭建hexo的github博客/","excerpt":"","text":"window下搭建hexo的github博客 写过一些笔记，但是大多在有道云笔记上，想搬到一个博客上，一开始选了codingPage,但是代码一般放在码云或者github,如今github的网还算快，所以放在githubPages上。 1. 先决条件 安装了node.js,npm(随node安装),git,gitbash. 拥有github账号 配置好了git与github的公钥(能上传下载自己github项目)。 2. 本地成功预览博客 全局安装hexo 1npm install hexo -g 创建的文件(比如blog),在文件夹中初始化hexo 1hexo init 安装将博客上传到github Pages的第三方包 1npm install hexo-deployer-git --save 配置与github的联动，即将代码上传的github地址，打开_config.yml，写下以下配置,YourgithubName==&gt;比如我https://github.com/OctoberCity,那么yougithubName写OctoberCity. 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 本地预览(在blog文件夹中打开gitbash) 123hexo clean ：清空一下多余的东西比如public,每次都执行这个会比较好hexo generate /hexo g ：将配置文件生成html,你会发现文件夹中多了public文件夹hexo server :本地预览 代开浏览器,127.0.0:4000，展示如下 3. 部署到github 登录github,新建一个仓库，以你github的名字，而这个仓库地址就是git@github.com:OctoberCity/OctoberCity.github.io.git 在blog配置博客配置文件_config.yml,repo就是你刚才新建的仓库地址 1234deploy: type: git repo: git@github.com:OctoberCity/OctoberCity.github.io.git branch: master 将博客上传到gihub,执行一下命令 123hexo clean hexo generatehexo deploy 浏览器输入https://octobercity.github.io,OctoberCity是我的,你们换下就可以 4.换主题 主题地址 https://hexo.io/themes/ 下面是我使用的一个主题，有很简单的配置过程，每个主题配置具体不一样，但是大体上相同 https://blog.minhow.com/2017/08/01/blog/installation-configuration/ 选择一个自己喜欢的主题，将主题下到blog/themes下面,你们可以使用我的这个试一下手 在blog配置博客配置文件_config.yml,配置使用主题，我的是miho 1theme: miho 先本地预览,成功之后步骤如上, 123hexo cleanhexo ghexo server 5.写文章 首先你要会基本markdown语法 如何新建一个文章,你会发现在source\\posts中多了一个newtest.md 1hexo new newtest 配置newtest.md的基本配置，在文章最上方需要配置title,date,tags,然后下方才是正文 123456---title: liun系统的基本命令date: 2018-8-13 20:54:21tags: - linux--- 本地预览 123hexo clean hexo ghexo server 6.遇到的问题 repo有的教程会写https://github.com/OctoberCity/OctoberCity.github.io，但我显示错误，换成这个git的地址可以。 123456deploy: type: git repo: git@github.com:OctoberCity/OctoberCity.github.io.git branch: master` 自己图片logo太大,主题代码没有限制图片大小，加上img长宽限制即可，要做其他修改可以自行修改 1blog\\themes\\miho\\layout\\_partial\\header.ejs","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}]}]}